package API

import (
    "fmt"
	"github.com/superg3m/stoic-go/Core/Router"
	"github.com/superg3m/stoic-go/inc/{{ .TableName }}"
)

func Get{{ .TableName }}(request *Router.StoicRequest, response Router.StoicResponse) {
	id := request.GetIntParam("id")

	record, err := {{ .TableName }}.FromId(id)
	if err != nil {
		response.SetError(fmt.Sprintf("Error fetching {{ .TableName }}: %s", err))
		return
	}

	response.SetData(record)
}

func Create{{ .TableName }}(request *Router.StoicRequest, response Router.StoicResponse) {
	// Instantiate a new model object
	entity := {{ .TableName }}.New()

    {{- range .Attributes }}
    {{- if eq .Type "string" }}
    entity.{{ .Name }} = request.GetStringParam("{{ .Name }}")
    {{- else if eq .Type "int" }}
    entity.{{ .Name }} = request.GetIntParam("{{ .Name }}")
    {{- else if eq .Type "bool" }}
    entity.{{ .Name }} = request.GetBoolParam("{{ .Name }}")
    {{- else if eq .Type "float" }}
    entity.{{ .Name }} = request.GetFloatParam("{{ .Name }}")
    {{- else }}
    request.GetJsonParam("{{ .Name }}", &entity.{{ .Name }})
    {{- end }}
    {{- end }}

	entity.Create()
	response.SetData(fmt.Sprintf("{{ .TableName }} created successfully with ID %d", entity.ID))
}

func Update{{ .TableName }}(request *Router.StoicRequest, response Router.StoicResponse) {
	id := request.GetIntParam("id")

	entity, err := {{ .TableName }}.FromId(id)
	if err != nil {
		response.SetError(fmt.Sprintf("Error fetching {{ .TableName }}: %s", err))
		return
	}

    {{- range .Attributes }}
    {{- if eq .Type "string" }}
    entity.{{ .Name }} = request.GetStringParam("{{ .Name }}")
    {{- else if eq .Type "int" }}
    entity.{{ .Name }} = request.GetIntParam("{{ .Name }}")
    {{- else if eq .Type "bool" }}
    entity.{{ .Name }} = request.GetBoolParam("{{ .Name }}")
    {{- else if eq .Type "float" }}
    entity.{{ .Name }} = request.GetFloatParam("{{ .Name }}")
    {{- else }}
    request.GetJsonParam("{{ .Name }}", &entity.{{ .Name }})
    {{- end }}
    {{- end }}

	entity.Update()

	response.SetData(fmt.Sprintf("{{ .TableName }} with ID %d updated successfully", id))
}

func Delete{{ .TableName }}(request *Router.StoicRequest, response Router.StoicResponse) {
	id := request.GetIntParam("id")

	err := {{ .TableName }}.DeleteByID(id) // Dynamic DeleteByID
	response.SetData(fmt.Sprintf("{{ .TableName }} with ID %d deleted successfully", id))
}

func init() {
	Router.RegisterApiEndpoint("{{ .TableName }}/Get", Get{{ .TableName }}, "GET",
		Router.MiddlewareValidParams("id"),
	)
	Router.RegisterApiEndpoint("{{ .TableName }}/Create", Create{{ .TableName }}, "POST",
		Router.MiddlewareValidParams({{ range .Attributes }}"{{ .Name }}", {{ end }}),
	)
	Router.RegisterApiEndpoint("{{ .TableName }}/Update", Update{{ .TableName }}, "PATCH",
		Router.MiddlewareValidParams("id", {{ range .Attributes }}"{{ .Name }}", {{ end }}),
	)
	Router.RegisterApiEndpoint("{{ .TableName }}/Delete", Delete{{ .TableName }}, "DELETE",
		Router.MiddlewareValidParams("id"),
	)
}