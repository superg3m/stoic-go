Make a single package called Core

- StoicCore.Router
- StoicCore.Middleware
- StoicCore.Client
- StoicCore.Server
- StoicCore.ORM
- StoicCore.Database
- StoicCore.Utility


Hey I need to write the usage code first this is the first of many rewrites!
Just start with the main package and then you can abstract when you need to!

- Stoic Services
    - Router Package (Use gorilla mux)
	    - router.go
		    - NewRouter()
		    - RegisterPrefix(newPrefix string)
		      RegisterApiEndpoint(path, handler, method, middlewares ...StoicMiddleware)
	    - middleware.go
		    - Public
			    - RegisterCommonMiddleware(middlewares ...StoicMiddleware) {}
			    - MiddlewareCORS() {}
			    - MiddlewareValidParams(requiredParams ...string) {}
			    - MiddlewareLogger() {}

			- Private
				- isMiddlewareRegistered() {}
				- chainMiddleware() {}
					- There has to be a better solution to this!
        - request.go
	        - type StoicRequest struct {}
            - SetError(msg string) {}
            - SetData(data any) {}
        - response.go
	        - type StoicResponse struct {}
            - func Has(name string) bool {}
            - func HasAll(args ...string) bool {}
            - func GetStringParam(name string) string {}
            - func GetIntParam(name string) int {}
            - func GetBoolParam(name string) bool {}
            - func GetFloatParam(name string) float64 {}
            - func GetJsonParam(name string, target any) {}

// Later
ORM
STRIPE
DATABASE
Mailer
Utility

Auto Increment
Timestamps
Composite Keys

- Make errors a bigger part the setError should take an error and I should be able to format it easily
Remove all individual panics
- trasfer Utility.AssertMsg() to not use a format function as second arg anymore