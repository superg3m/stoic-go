package {{ .TableName }}

import (
	"github.com/superg3m/stoic-go/Core/ORM"
	"time"
)

type {{ .TableName }} struct {
    Meta
}

func New() *{{ .TableName }} {
	ret := new({{ .TableName }})

	//ret.DB = ORM.GetInstance()

    {{- range .Columns }}
    {{- if eq .Type "string" }}
    ret.{{ .Name }} = ""
    {{- else if eq .Type "int" }}
    ret.{{ .Name }} = 0
    {{- else if eq .Type "bool" }}
    ret.{{ .Name }} = false
    {{- else if eq .Type "float" }}
    ret.{{ .Name }} = 0.0
    {{- else if eq .Type "time.Time" }}
    ret.{{ .Name }} = time.Now()
    {{- else if eq .Type "*time.Time" }}
    ret.{{ .Name }} = nil
    {{- end }}
    {{- end }}

	return ret
}

func (model *{{ .TableName }}) CanCreate() []string {
	return nil
}

func (model *{{ .TableName }}) CanRead() []string {
	return nil
}

func (model *{{ .TableName }}) CanUpdate() []string {
	return nil
}

func (model *{{ .TableName }}) CanDelete() []string {
	return nil
}


func init() {
	ORM.RegisterTableName(&{{ .TableName }}{})

    {{- range .Columns }}
    {{- if .StrFlags }}
    ORM.RegisterTableColumn("{{ .Name }}", "{{ .Name }}", {{ .StrFlags }})
    {{- else }}
    ORM.RegisterTableColumn("{{ .Name }}", "{{ .Name }}")
    {{- end }}
    {{- end }}
}