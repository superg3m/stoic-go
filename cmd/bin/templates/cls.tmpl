package {{ .TableName }}

import (
	"github.com/jmoiron/sqlx"
	"github.com/superg3m/stoic-go/Core/ORM"
	"time"
)


type {{ .TableName }} struct {
	DB *sqlx.DB

	{{- range .Columns }}
	{{ .Name }} {{ .Type }}
	{{- end }}
}

func New() *{{ .TableName }} {
	ret := new({{ .TableName }})

	//ret.DB = ORM.GetInstance()

    {{- range .Columns }}
    {{- if eq .Type "string" }}
    ret.{{ .Name }} = ""
    {{- else if eq .Type "int" }}
    ret.{{ .Name }} = 0
    {{- else if eq .Type "bool" }}
    ret.{{ .Name }} = false
    {{- else if eq .Type "float" }}
    ret.{{ .Name }} = 0.0
    {{- else if eq .Type "time.Time" }}
    ret.{{ .Name }} = time.Now()
    {{- else if eq .Type "*time.Time" }}
    ret.{{ .Name }} = nil
    {{- end }}
    {{- end }}

	return ret
}

func From{{ .FromPrimaryKey }}({{ .PrimaryKeyArgsWithTypes }}) (*{{ .TableName }}, []string) {
    ret := New()
    {{- range .PrimaryKeys }}
    ret.{{ .Name }} = {{ .Name }}
    {{- end }}
    read := ret.Read()
    if read.IsBad() {
        return nil, read.GetErrors()
    }

    return ret, nil
}

{{- range .UniqueKeys }}
func From{{ .Name }}({{ .Name }} {{ .Type }}) (*{{ $.TableName }}, []string) {
    ret := New()
    ret.{{ .Name }} = {{ .Name }}
    read := ret.Read()
    if read.IsBad() {
        return nil, read.GetErrors()
    }
    
    return ret, nil
}
{{- end }}


func init() {
	ORM.RegisterTableName(&{{ .TableName }}{})

    {{- range .Columns }}
    {{- if .StrFlags }}
    ORM.RegisterTableColumn("{{ .Name }}", "{{ .Name }}", {{ .StrFlags }})
    {{- else }}
    ORM.RegisterTableColumn("{{ .Name }}", "{{ .Name }}")
    {{- end }}
    {{- end }}
}